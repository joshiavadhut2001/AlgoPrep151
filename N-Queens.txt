class Solution {
public:
    bool issafe(int row,int col,vector<string>&board,int n)
    {
        // check upper diagonal
        int r = row;
        int c = col;
        while(r>=0 && c>=0)
        {
            if(board[r][c]=='Q')return false;
            r--;
            c--;
        }
        // checking horizontal
        r=row;
        c=col;
        while(c>=0)
        {
            if(board[r][c]=='Q')return false;
            c--;
        }
        // checking lower diagonal
        r=row;
        c=col;
         while(r<n && c>=0)
        {
            if(board[r][c]=='Q')return false;
            r++;
            c--;
        }
        return true;
    }
    void solve(int c,vector<string>&board,vector<vector<string>>&ans,int n)
    {
        //base case
        if(c == n)
        {
            ans.push_back(board);
            return ;

        }
        for(int i=0;i<n;i++)
        {
            if(issafe(i,c,board,n))
            {
            board[i][c]='Q';
            solve(c+1,board,ans,n);
             board[i][c]='.';
            }
            
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }
        solve(0,board,ans,n);
        return ans;
    }
};